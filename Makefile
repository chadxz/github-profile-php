SHELL := /bin/bash
IMAGE_NAME := github-profile-php

#
# default build target
#
all: build
.PHONY: all

#
# Run static analysis
#
lint: build
	docker run -ti --rm $(IMAGE_NAME) composer lint
.PHONY: lint

#
# Run unit tests
#
test: build
	docker run -ti --rm $(IMAGE_NAME) composer test
.PHONY: test

#
# Run the application to do development against it with the source from your
# local computer mounted into the container.
#
dev: build
	./bin/compose.sh --env local -- up
.PHONY: dev

#
# Run the application without source mounted into the container.
#
run: build
	./bin/compose.sh -- up
.PHONY: run

#
# Build the docker image
#
build:
	docker build -t $(IMAGE_NAME) .
.PHONY: build

#
# Stop and remove any containers networks, images, or volumes created
# by this build.
#
clean-containers:
	docker-compose down --volumes --remove-orphans
.PHONY: clean-containers

#
# Quick cleanup; Leaves things that are expensive to remove or rebuild
#
clean: clean-containers
.PHONY: clean

#
# Remove any images generated by this build
#
clean-images:
	docker images -f 'label=name=$(IMAGE_NAME)' \
				  --format="{{.Repository}} {{.Tag}} {{.ID}}" | \
		awk '{ \
			if ($$2=="<none>") { \
				print $$3 \
			} else { \
				print $$1 ":" $$2 \
			} \
		}' | \
		xargs docker rmi
.PHONY: clean-images

#
# Clean up even the stuff that's expensive to build and any symbolic links
# created by composer
#
really-clean: clean clean-images
	rm -rf vendor/
.PHONY: really-clean
